[
  {
    "name": "React",
    "value": "react",
    "color": "#5de",
    "type": "template"
  },
  {
    "name": "Preact",
    "value": "vite-preact",
    "color": "#64b",
    "type": "template"
  },
  {
    "name": "Vue",
    "value": "vue",
    "color": "#4b8",
    "type": "template"
  },
  {
    "name": "HTML",
    "value": "static",
    "color": "#f80",
    "type": "template"
  },
  {
    "name": "Solid",
    "value": "solid",
    "color": "#47a",
    "type": "template"
  },
  {
    "name": "C++",
    "color": "#f58",
    "template": "vanilla",
    "value": "cpp",
    "type": "files",
    "files": {
      "index.html": "<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <script src=\"./index.js\"></script>\n</head>\n\n<body>\n  <div id=\"terminal\"></div>\n  <button id=\"compile\">Compile</button>\n\n  <style>\n    html,\n    body {\n      margin: 0;\n      padding: 0;\n      max-width: 100vw;\n      overflow-x: hidden;\n    }\n\n    body {\n      background: #222;\n    }\n\n    #compile {\n      display: block;\n      padding: 10px;\n      margin: 10px auto;\n      width: calc(100% - 20px);\n      max-width: 300px;\n      border-radius: 5px;\n      color: #fff;\n      cursor: pointer;\n      background: #334;\n      border: 0;\n      transition: background 0.1s ease-in-out;\n    }\n\n    #compile:hover {\n      background: #223;\n    }\n\n    .terminal * {\n      background-color: #000 !important;\n    }\n\n    #terminal {\n      max-height: calc(100vh - 2em);\n    }\n  </style>\n</body>\n\n</html>",
      "index.js": "import { Terminal } from 'xterm';\nimport 'xterm/css/xterm.css';\n\nwindow.proxy_prefix = 'https://raw.githubusercontent.com/plutoniumm/wassemblers/master/cpp/';\n\nconst tbox = new Terminal( {\n  cursorBlink: true,\n  convertEol: true,\n  disableStdin: true,\n} );\nconst term = document.querySelector( '#terminal' );\ntbox.open( term );\ntbox.write( 'Terminal Ready. Compile Now!\\n' );\n\nclass WorkerAPI {\n  constructor () {\n    this.nextResponseId = 0;\n    this.responseCBs = new Map();\n    const channel = new MessageChannel();\n    this.port = channel.port1;\n    this.port.onmessage = this.onmessage.bind( this );\n\n    const remotePort = channel.port2;\n    const remote = window.proxy_prefix + 'worker.js';\n    fetch( remote ).then( res => res.blob() )\n      .then( blob => {\n        this.worker = new Worker( URL.createObjectURL( blob ) );\n        this.worker.postMessage( {\n          id: 'constructor',\n          mod: window.proxy_prefix,\n          data: remotePort\n        }, [ remotePort ] );\n      } );\n  }\n\n  terminate () {\n    this.worker.terminate();\n  }\n\n  async compileToAssembly ( options ) {\n    const responseId = this.nextResponseId++;\n    const responsePromise = new Promise( ( resolve, reject ) => {\n      this.responseCBs.set( responseId, { resolve, reject } );\n    } );\n    this.port.postMessage( {\n      id: 'compileToAssembly',\n      responseId,\n      mod: window.proxy_prefix,\n      data: options\n    } );\n    return await responsePromise;\n  }\n\n  compileLinkRun ( contents ) {\n    this.port.postMessage( {\n      id: 'compileLinkRun',\n      mod: window.proxy_prefix,\n      data: contents\n    } );\n  }\n\n  onmessage ( event ) {\n    switch ( event.data.id ) {\n      case 'write':\n        tbox.write( event.data.data );\n        break;\n\n      case 'compileToAssembly': {\n        const responseId = event.data.responseId;\n        const promise = this.responseCBs.get( responseId );\n        if ( promise ) {\n          this.responseCBs.delete( responseId );\n          promise.resolve( event.data.data );\n        };\n        break;\n      }\n    }\n  }\n};\n\nlet api;\ndocument\n  .querySelector( '#compile' )\n  .addEventListener( 'click', async () => {\n    api = new WorkerAPI();\n    const start = await import( './main.cpp' );\n    api.compileLinkRun( start.default );\n  } );",
      "main.cpp": {
        "active": true,
        "code": "#include <iostream>\nusing namespace std;\n\nint main() {\n  cout << \"Hello, World!\" << endl;\n  return 0;\n}"
      }
    },
    "customSetup": {
      "dependencies": {
        "xterm": "latest"
      }
    }
  },
  {
    "name": "Markdown",
    "color": "#5af",
    "template": "svelte",
    "value": "mdsvex",
    "type": "files",
    "files": {
      "App.svelte": "<script>\n  import render from \"./parse.js\";\n  import content from \"./content.md\";\n\n  function proc(content) {\n    let string = \"\";\n    try {\n      return render(content).html;\n    } catch (e) {\n      console.log(\"ERROR: \", e);\n    }\n\n    return string;\n  }\n</script>\n\n<svelte:head>\n  <link\n    rel=\"stylesheet\"\n    href=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/styles/atom-one-dark.min.css\"\n    crossorigin=\"anonymous\"\n    referrerpolicy=\"no-referrer\"\n  />\n  <link\n    rel=\"stylesheet\"\n    href=\"https://cdn.jsdelivr.net/npm/katex@0.16.8/dist/katex.min.css\"\n    crossorigin=\"anonymous\"\n    referrerpolicy=\"no-referrer\"\n  />\n</svelte:head>\n\n<article>\n  {@html proc(content)}\n</article>\n",
      "content.md": {
        "active": true,
        "code": "---\nproxy: https://x.manav.ch/p2/proxy?url=\ntitle: \"Usage Guide\"\n---\n\n# &title;\n```bash\nmd2html src/content.md\n```\n\n<iframe src=\"https://www.youtube-nocookie.com/embed/dQw4w9WgXcQ\" title=\"Rick Astley - Never Gonna Give You Up (Official Music Video)\" frameborder=\"0\" allow=\"accelerometer; clipboard-write; encrypted-media; picture-in-picture;\"></iframe>\n\n<br />\n\n<img src=\"&proxy;https://www.markdownguide.org/assets/images/markdown-mark.svg\" />\n\n$$\n\\int_{-\\infty}^{\\infty} e^{-x^2} dx !=\n\\begin{bmatrix}\n1 & 2 & 3 \\\\\n4 & 5 & e^{i\\pi} \\\\\n7 & 8 & 9\n\\end{bmatrix}\n$$\n\nThis is a basic example of how to use `md2html` to convert a markdown file to an HTML file.\n\n```html\n<body>\n  <h1>hi</h1>\n</body>\n```\n"
      },
      "parse.js": "import markedKatex from \"marked-katex-extension\";\nimport { markedHighlight } from \"marked-highlight\";\nimport { marked } from \"marked\";\nimport hljs from 'highlight.js';\nimport yaml from \"js-yaml\";\n\nconst renderer = {\n  code ( text, level ) {\n    if ( level === \"mermaid\" ) {\n      return `<pre class=\"mermaid\">${ text }</pre>`;\n    }\n    if ( level === \"psd\" ) {\n      return `<pre class=\"language-ps\">${ text }</pre>`;\n    };\n    return false;\n  }\n};\n\nconst options = {\n  katex: {\n    throwOnError: false,\n    output: \"mathml\",\n  },\n  hljs: {\n    langPrefix: 'hljs language-',\n    highlight ( code, lang ) {\n      if ( lang === \"psd\" ) {\n        const rendered = code\n          .split( \"\\n\" )\n          .map( ( e, i ) => {\n            return `<div class=\"ps\"><m>${ i }:</m>&ensp;${ marked( e, mcf )\n              }</div>`;\n          } )\n          .join( \"\" );\n        return rendered;\n      };\n      const language = hljs.getLanguage( lang ) ? lang : 'plaintext';\n      return hljs.highlight( code, { language } ).value;\n    }\n  }\n}\n\nmarked\n  .use( markedKatex( options.katex ) )\n  .use( markedHighlight( options.hljs ) )\n  .use( { renderer } )\n\nconst mcf = { mangle: false, headerIds: false };\nexport default function render ( text ) {\n  let [ , m, ...rest ] = text.split( \"---\" );\n  m = yaml.load( m?.trim(), { json: true } );\n\n  rest = rest.join( \"---\" )\n  let html = marked( rest, mcf );\n\n  for ( let key in m ) {\n    html = html.replace( `&${ key };`, m[ key ] );\n  }\n  return { meta: m, html }\n};\n",
      "styles.css": "img,\nvideo,\ncode,\npre,\niframe {\n  border-radius: 5px;\n  max-width: 100%;\n}"
    },
    "customSetup": {
      "dependencies": {
        "marked": "latest",
        "js-yaml": "latest",
        "highlight.js": "latest",
        "marked-highlight": "latest",
        "marked-katex-extension": "latest",
        "katex": "latest"
      }
    }
  },
  {
    "name": "Svelte",
    "color": "#f40",
    "template": "svelte",
    "value": "sveltevg",
    "type": "files",
    "files": {
      "App.svelte": {
        "active": true,
        "code": "<script></script>\n\n<svg\n  viewBox=\"0 0 100 100\"\n  width=\"100\"\n  height=\"100\"\n  font-family=\"Helvetica\"\n  xmlns=\"http://www.w3.org/2000/svg\"\n>\n  <defs>\n    <linearGradient id=\"x\" x1=\"0\" y1=\"0\" x2=\"100%\" y2=\"100%\">\n      <stop offset=\"0\" stop-color=\"#b2F\"></stop><stop\n        offset=\"1\"\n        stop-color=\"#44f\"\n      >\n      </stop>\n    </linearGradient>\n    <filter id=\"neo\">\n      <feDropShadow dx=\"0.5\" dy=\"0.5\" stdDeviation=\"0.1\" flood-color=\"#44f\">\n      </feDropShadow>\n      <feDropShadow dx=\"-0.5\" dy=\"-0.5\" stdDeviation=\"0.1\" flood-color=\"#b2F\">\n      </feDropShadow>\n    </filter>\n    <filter id=\"shadow\">\n      <feDropShadow dx=\"2\" dy=\"2\" stdDeviation=\"2\" flood-color=\"#2228\">\n      </feDropShadow>\n    </filter>\n  </defs>\n  <rect\n    filter=\"url(#neo)\"\n    fill=\"url(#x)\"\n    x=\"1\"\n    y=\"1\"\n    width=\"98\"\n    height=\"98\"\n    rx=\"10\"\n  >\n  </rect>\n  <path\n    fill=\"#fff\"\n    filter=\"url(#shadow)\"\n    transform=\"scale(0.15) translate(72.5,85)\"\n    d=\"M380 125l-9-1s-96-7-134 119c-34 110-111 105-115 105h-5a102 102 0 015-204c35 0 67 18 86 47l16-11a122 122 0 10-100 188c17 0 97-6 132-119 33-110 111-105 115-105h7a102 102 0 11-94 157l-16 11a122 122 0 10112-187z\"\n  >\n  </path>\n</svg>\n"
      },
      "styles.css": "svg {\n  width: 500px;\n  height: 500px;\n  border: 1px solid #888;\n}"
    }
  }
]